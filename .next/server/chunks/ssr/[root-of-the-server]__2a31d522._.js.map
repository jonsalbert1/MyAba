{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jonsa/JSA/myaba/pages/quiz.tsx"],"sourcesContent":["// pages/quiz.tsx\r\nimport { useEffect, useMemo, useState, useCallback } from \"react\";\r\n\r\n/** Canonical normalized quiz item */\r\ntype QuizItem = {\r\n  domain?: string;\r\n  question: string;\r\n  choices: [string, string, string, string];\r\n  /** 'A' | 'B' | 'C' | 'D' */\r\n  answer: \"A\" | \"B\" | \"C\" | \"D\";\r\n  rationale?: string;\r\n};\r\n\r\n/** Raw deck shapes we support */\r\ntype RawDeckAny =\r\n  | Array<{\r\n      domain?: string;\r\n      question: string;\r\n      a: string;\r\n      b: string;\r\n      c: string;\r\n      d: string;\r\n      answer: string; // 'A'|'B'|'C'|'D' (case-insensitive)\r\n      rationale?: string;\r\n    }>\r\n  | Array<{\r\n      domain?: string;\r\n      question: string;\r\n      choices: string[]; // >= 4\r\n      answerIndex: number; // 0..3\r\n      rationale?: string;\r\n    }>\r\n  | unknown;\r\n\r\n/** Normalize whatever is in localStorage into QuizItem[] */\r\nfunction normalizeDeck(raw: RawDeckAny): QuizItem[] {\r\n  if (!Array.isArray(raw)) return [];\r\n  const out: QuizItem[] = [];\r\n\r\n  for (const row of raw as any[]) {\r\n    // Shape 1: a/b/c/d + answer ('A'|'B'|'C'|'D')\r\n    if (\r\n      row &&\r\n      typeof row.question === \"string\" &&\r\n      typeof row.a === \"string\" &&\r\n      typeof row.b === \"string\" &&\r\n      typeof row.c === \"string\" &&\r\n      typeof row.d === \"string\" &&\r\n      typeof row.answer === \"string\"\r\n    ) {\r\n      const ans = String(row.answer).trim().toUpperCase();\r\n      const valid = [\"A\", \"B\", \"C\", \"D\"];\r\n      if (!valid.includes(ans)) continue;\r\n      out.push({\r\n        domain: row.domain ?? undefined,\r\n        question: row.question,\r\n        choices: [row.a, row.b, row.c, row.d],\r\n        answer: ans as QuizItem[\"answer\"],\r\n        rationale: row.rationale ?? \"\",\r\n      });\r\n      continue;\r\n    }\r\n\r\n    // Shape 2: choices[] + answerIndex\r\n    if (\r\n      row &&\r\n      typeof row.question === \"string\" &&\r\n      Array.isArray(row.choices) &&\r\n      row.choices.length >= 4 &&\r\n      Number.isInteger(row.answerIndex)\r\n    ) {\r\n      const choices = row.choices.slice(0, 4) as [string, string, string, string];\r\n      const idx = Math.max(0, Math.min(3, row.answerIndex));\r\n      const map = [\"A\", \"B\", \"C\", \"D\"] as const;\r\n      out.push({\r\n        domain: row.domain ?? undefined,\r\n        question: row.question,\r\n        choices,\r\n        answer: map[idx],\r\n        rationale: row.rationale ?? \"\",\r\n      });\r\n      continue;\r\n    }\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nfunction loadDeck(): QuizItem[] {\r\n  try {\r\n    const raw = localStorage.getItem(\"quiz:deck\");\r\n    if (!raw) return [];\r\n    const parsed = JSON.parse(raw) as RawDeckAny;\r\n    return normalizeDeck(parsed);\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport default function QuizPage() {\r\n  const [deck, setDeck] = useState<QuizItem[]>([]);\r\n  const [idx, setIdx] = useState(0);\r\n  const [selected, setSelected] = useState<\"A\" | \"B\" | \"C\" | \"D\" | null>(null);\r\n  const [revealed, setRevealed] = useState(false);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [visited, setVisited] = useState<boolean[]>([]); // track which items have been answered at least once\r\n\r\n  // Load deck on mount\r\n  useEffect(() => {\r\n    const d = loadDeck();\r\n    if (d.length === 0) {\r\n      // Fallback example so page renders cleanly\r\n      setDeck([\r\n        {\r\n          domain: \"Demo\",\r\n          question: \"Which schedule delivers reinforcement after a fixed number of responses?\",\r\n          choices: [\"VI\", \"VR\", \"FR\", \"FI\"],\r\n          answer: \"C\",\r\n          rationale: \"FR delivers reinforcement after a set number of responses (e.g., FR5).\",\r\n        },\r\n      ]);\r\n      setVisited([false]);\r\n    } else {\r\n      setDeck(d);\r\n      setVisited(new Array(d.length).fill(false));\r\n    }\r\n  }, []);\r\n\r\n  const total = deck.length;\r\n  const current = deck[idx];\r\n\r\n  const isCorrect = useMemo(() => {\r\n    if (!selected || !current) return false;\r\n    return selected === current.answer;\r\n  }, [selected, current]);\r\n\r\n  const onChoose = useCallback(\r\n    (choice: \"A\" | \"B\" | \"C\" | \"D\") => {\r\n      if (revealed) return; // lock after reveal\r\n      setSelected(choice);\r\n      setRevealed(true);\r\n      setVisited((v) => {\r\n        const next = v.slice();\r\n        next[idx] = true;\r\n        return next;\r\n      });\r\n      if (current && choice === current.answer) {\r\n        setCorrectCount((n) => n + 1);\r\n      }\r\n    },\r\n    [revealed, idx, current]\r\n  );\r\n\r\n  const goNext = useCallback(() => {\r\n    if (total === 0) return;\r\n    setSelected(null);\r\n    setRevealed(false);\r\n    setIdx((i) => (i + 1 < total ? i + 1 : i));\r\n  }, [total]);\r\n\r\n  const goPrev = useCallback(() => {\r\n    if (total === 0) return;\r\n    setSelected(null);\r\n    setRevealed(false);\r\n    setIdx((i) => (i - 1 >= 0 ? i - 1 : i));\r\n  }, [total]);\r\n\r\n  const resetAll = useCallback(() => {\r\n    setIdx(0);\r\n    setSelected(null);\r\n    setRevealed(false);\r\n    setCorrectCount(0);\r\n    setVisited(new Array(deck.length).fill(false));\r\n  }, [deck.length]);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const onKey = (e: KeyboardEvent) => {\r\n      const key = e.key.toLowerCase();\r\n      if ([\"a\", \"b\", \"c\", \"d\"].includes(key)) {\r\n        const map: Record<string, \"A\" | \"B\" | \"C\" | \"D\"> = { a: \"A\", b: \"B\", c: \"C\", d: \"D\" };\r\n        onChoose(map[key]);\r\n      } else if (key === \"n\") {\r\n        goNext();\r\n      } else if (key === \"p\") {\r\n        goPrev();\r\n      } else if (key === \"r\") {\r\n        resetAll();\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", onKey);\r\n    return () => window.removeEventListener(\"keydown\", onKey);\r\n  }, [onChoose, goNext, goPrev, resetAll]);\r\n\r\n  // Derived stats\r\n  const answeredCount = visited.filter(Boolean).length;\r\n  const scorePct = total ? Math.round((correctCount / total) * 100) : 0;\r\n  const progressPct = total ? Math.round((answeredCount / total) * 100) : 0;\r\n\r\n  return (\r\n    <main className=\"min-h-screen bg-gray-50\">\r\n      {/* Title row (consistent with Flashcards page) */}\r\n      <section className=\"mx-auto max-w-5xl px-6 pt-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Quiz</h1>\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              Score: <span className=\"font-semibold\">{correctCount}</span> / {total} ({scorePct}%)\r\n            </div>\r\n            <button\r\n              onClick={resetAll}\r\n              className=\"rounded-xl border px-3 py-1.5 text-sm font-medium hover:bg-gray-100\"\r\n              title=\"Reset (R)\"\r\n            >\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <p className=\"mt-1 text-sm text-gray-600\">\r\n          Use A/B/C/D, N (next), P (prev), R (reset)\r\n        </p>\r\n      </section>\r\n\r\n      {/* Body */}\r\n      <section className=\"mx-auto max-w-5xl px-6 py-6\">\r\n        {/* Progress */}\r\n        <div className=\"mb-6\">\r\n          <div className=\"h-2 w-full overflow-hidden rounded-full bg-gray-200\">\r\n            <div\r\n              className=\"h-full bg-blue-600 transition-all\"\r\n              style={{ width: `${progressPct}%` }}\r\n            />\r\n          </div>\r\n          <p className=\"mt-2 text-sm text-gray-600\">\r\n            Progress: {answeredCount}/{total} ({progressPct}%)\r\n          </p>\r\n        </div>\r\n\r\n        {/* Question Card */}\r\n        {current ? (\r\n          <div className=\"rounded-2xl bg-white p-6 shadow-md\">\r\n            {/* Meta */}\r\n            <div className=\"mb-2 flex items-center justify-between\">\r\n              <span className=\"text-xs font-medium uppercase tracking-wide text-gray-500\">\r\n                {current.domain || \"Domain\"}\r\n              </span>\r\n              <span className=\"text-xs text-gray-500\">\r\n                Q {idx + 1} / {total}\r\n              </span>\r\n            </div>\r\n\r\n            {/* Question */}\r\n            <h2 className=\"mb-6 text-xl font-semibold leading-snug text-gray-900\">\r\n              {current.question}\r\n            </h2>\r\n\r\n            {/* Choices */}\r\n            <div className=\"grid gap-3\">\r\n              {([\"A\", \"B\", \"C\", \"D\"] as const).map((label, i) => {\r\n                const choiceText = current.choices[i] ?? \"\";\r\n                const isSelected = selected === label;\r\n                const isAnswer = current.answer === label;\r\n\r\n                // Base + stateful styles\r\n                let base =\r\n                  \"w-full rounded-xl border px-4 py-3 text-left transition focus:outline-none\";\r\n                let cls = \"border-gray-300 hover:bg-gray-50\";\r\n\r\n                if (!revealed && isSelected) {\r\n                  cls = \"border-blue-500 ring-2 ring-blue-500/30\";\r\n                }\r\n\r\n                if (revealed) {\r\n                  if (isAnswer) cls = \"border-green-600 bg-green-50\";\r\n                  if (!isAnswer && isSelected) cls = \"border-red-600 bg-red-50\";\r\n                }\r\n\r\n                return (\r\n                  <button\r\n                    key={label}\r\n                    disabled={revealed}\r\n                    onClick={() => onChoose(label)}\r\n                    className={`${base} ${cls}`}\r\n                  >\r\n                    <div className=\"flex items-start gap-3\">\r\n                      <span className=\"mt-0.5 inline-flex h-6 w-6 shrink-0 items-center justify-center rounded-md border text-sm font-bold\">\r\n                        {label}\r\n                      </span>\r\n                      <span className=\"text-gray-900\">{choiceText}</span>\r\n                    </div>\r\n                  </button>\r\n                );\r\n              })}\r\n            </div>\r\n\r\n            {/* Rationale (persists until navigation/reset) */}\r\n            {revealed && (\r\n              <div className=\"mt-6 rounded-xl border border-blue-200 bg-blue-50 p-4\">\r\n                <p className=\"mb-1 text-sm font-semibold text-blue-800\">\r\n                  {isCorrect ? \"Correct ✅\" : \"Not quite ❌\"}\r\n                </p>\r\n                {current.rationale ? (\r\n                  <p className=\"text-blue-900\">{current.rationale}</p>\r\n                ) : (\r\n                  <p className=\"text-blue-900\">No rationale provided for this item.</p>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Controls */}\r\n            <div className=\"mt-6 flex items-center justify-between\">\r\n              <button\r\n                onClick={goPrev}\r\n                disabled={idx === 0}\r\n                className=\"rounded-xl border px-4 py-2 font-medium hover:bg-gray-100 disabled:cursor-not-allowed disabled:opacity-50\"\r\n                title=\"Prev (P)\"\r\n              >\r\n                ← Prev\r\n              </button>\r\n\r\n              <div className=\"text-sm text-gray-500\">\r\n                {revealed ? \"Press Next to continue\" : \"Choose an answer\"}\r\n              </div>\r\n\r\n              <button\r\n                onClick={goNext}\r\n                disabled={idx >= total - 1}\r\n                className=\"rounded-xl bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700 disabled:cursor-not-allowed disabled:opacity-50\"\r\n                title=\"Next (N)\"\r\n              >\r\n                Next →\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"rounded-2xl border border-dashed p-8 text-center text-gray-500\">\r\n            No quiz deck found in <code>localStorage</code> at <code>quiz:deck</code>. Load your deck and refresh.\r\n          </div>\r\n        )}\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}