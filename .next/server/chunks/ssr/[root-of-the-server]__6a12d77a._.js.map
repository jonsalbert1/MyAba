{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jonsa/JSA/myaba/lib/storage.ts"],"sourcesContent":["// lib/storage.ts\r\nexport type FlashCard = { term: string; def: string };\r\nexport type QuizItem = {\r\n  domain?: string;\r\n  question: string;\r\n  a: string;\r\n  b: string;\r\n  c: string;\r\n  d: string;\r\n  answer: \"A\" | \"B\" | \"C\" | \"D\";\r\n  rationale?: string;\r\n};\r\n\r\nconst safe = <T,>(key: string, fallback: T): T => {\r\n  if (typeof window === \"undefined\") return fallback;\r\n  try {\r\n    const raw = localStorage.getItem(key);\r\n    return raw ? (JSON.parse(raw) as T) : fallback;\r\n  } catch {\r\n    return fallback;\r\n  }\r\n};\r\n\r\nexport const loadFlashcards = () => safe<FlashCard[]>(\"safmeds:deck\", []);\r\nexport const saveFlashcards = (arr: FlashCard[]) =>\r\n  localStorage.setItem(\"safmeds:deck\", JSON.stringify(arr));\r\n\r\nexport const loadQuiz = () => safe<QuizItem[]>(\"quiz:deck\", []);\r\nexport const saveQuiz = (arr: QuizItem[]) =>\r\n  localStorage.setItem(\"quiz:deck\", JSON.stringify(arr));\r\n\r\nexport type SafMedsTrial = { timestamp: number; correct: number; errors: number; secs: number };\r\nexport const loadSafMedsTrials = () => safe<SafMedsTrial[]>(\"safmeds:trials\", []);\r\nexport const saveSafMedsTrials = (arr: SafMedsTrial[]) =>\r\n  localStorage.setItem(\"safmeds:trials\", JSON.stringify(arr));\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;;;;;;;;;;;AAajB,MAAM,OAAO,CAAK,KAAa;IAC7B,wCAAmC,OAAO;;;AAO5C;AAEO,MAAM,iBAAiB,IAAM,KAAkB,gBAAgB,EAAE;AACjE,MAAM,iBAAiB,CAAC,MAC7B,aAAa,OAAO,CAAC,gBAAgB,KAAK,SAAS,CAAC;AAE/C,MAAM,WAAW,IAAM,KAAiB,aAAa,EAAE;AACvD,MAAM,WAAW,CAAC,MACvB,aAAa,OAAO,CAAC,aAAa,KAAK,SAAS,CAAC;AAG5C,MAAM,oBAAoB,IAAM,KAAqB,kBAAkB,EAAE;AACzE,MAAM,oBAAoB,CAAC,MAChC,aAAa,OAAO,CAAC,kBAAkB,KAAK,SAAS,CAAC","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jonsa/JSA/myaba/pages/flashcards.tsx"],"sourcesContent":["// pages/flashcards.tsx\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { FlashCard, loadFlashcards, saveFlashcards } from \"../lib/storage\";\r\n\r\nexport default function FlashcardsPage() {\r\n  const [deck, setDeck] = useState<FlashCard[]>([]);\r\n  const [idx, setIdx] = useState(0);\r\n  const [flipped, setFlipped] = useState(false);\r\n  const card = deck[idx];\r\n\r\n  // Hydrate from Supabase first; fallback to localStorage\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    async function load() {\r\n      try {\r\n        const res = await fetch(\"/api/flashcards/list?deckId=default\");\r\n        const json = await res.json();\r\n        if (!cancelled && Array.isArray(json.records) && json.records.length) {\r\n          setDeck(json.records);\r\n          setIdx(0);\r\n          setFlipped(false);\r\n          return;\r\n        }\r\n      } catch {\r\n        // ignore and fall back\r\n      }\r\n      if (!cancelled) setDeck(loadFlashcards());\r\n    }\r\n    load();\r\n    return () => { cancelled = true; };\r\n  }, []);\r\n\r\n  const progress = useMemo(() => {\r\n    if (deck.length === 0) return \"0 / 0\";\r\n    return `${idx + 1} / ${deck.length}`;\r\n  }, [idx, deck.length]);\r\n\r\n  const next = () => {\r\n    setFlipped(false);\r\n    setIdx((i) => (deck.length ? (i + 1) % deck.length : 0));\r\n  };\r\n\r\n  const prev = () => {\r\n    setFlipped(false);\r\n    setIdx((i) => (deck.length ? (i - 1 + deck.length) % deck.length : 0));\r\n  };\r\n\r\n  function onCSVUpload(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const f = e.target.files?.[0];\r\n    if (!f) return;\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const txt = String(reader.result || \"\");\r\n      // CSV with header: term,def\r\n      const lines = txt.split(/\\r?\\n/).filter(Boolean);\r\n      const rows: FlashCard[] = [];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const parts = lines[i].split(\",\");\r\n        if (i === 0 && /term/i.test(parts[0])) continue;\r\n        if (parts.length >= 2) {\r\n          rows.push({ term: parts[0].trim(), def: parts.slice(1).join(\",\").trim() });\r\n        }\r\n      }\r\n      // persist locally\r\n      saveFlashcards(rows);\r\n      // optimistic UI\r\n      setDeck(rows);\r\n      setIdx(0);\r\n      setFlipped(false);\r\n      // persist to DB (non-blocking)\r\n      fetch(\"/api/flashcards/bulkUpsert\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ deckId: \"default\", records: rows }),\r\n      }).catch(() => {});\r\n    };\r\n    reader.readAsText(f);\r\n  }\r\n\r\n  return (\r\n    <main style={{ maxWidth: 900, margin: \"0 auto\", padding: 24 }}>\r\n      <h1 style={{ fontSize: 24, marginBottom: 10 }}>Flashcards</h1>\r\n      <p style={{ color: \"#555\", marginBottom: 16 }}>\r\n        Click the card to flip. Import CSV with headers <code>term,def</code>.\r\n      </p>\r\n\r\n      <label\r\n        style={{\r\n          display: \"inline-block\",\r\n          padding: \"10px 14px\",\r\n          background: \"#0b3d91\",\r\n          color: \"white\",\r\n          borderRadius: 8,\r\n          cursor: \"pointer\",\r\n          marginBottom: 16,\r\n        }}\r\n      >\r\n        Import CSV\r\n        <input type=\"file\" accept=\".csv\" onChange={onCSVUpload} style={{ display: \"none\" }} />\r\n      </label>\r\n\r\n      <div style={{ marginBottom: 12, color: \"#666\" }}>\r\n        Cards: {deck.length} &middot; {progress}\r\n      </div>\r\n\r\n      <div\r\n        onClick={() => setFlipped((f) => !f)}\r\n        style={{\r\n          userSelect: \"none\",\r\n          background: \"white\",\r\n          border: \"1px solid #e5e7eb\",\r\n          borderRadius: 16,\r\n          padding: 30,\r\n          minHeight: 180,\r\n          boxShadow: \"0 8px 18px rgba(0,0,0,0.06)\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n          fontSize: 22,\r\n          cursor: \"pointer\",\r\n          transition: \"transform 0.2s\",\r\n        }}\r\n      >\r\n        {card ? (flipped ? card.def : card.term) : \"No cards yet. Import a CSV.\"}\r\n      </div>\r\n\r\n      <div style={{ display: \"flex\", gap: 10, marginTop: 14 }}>\r\n        <button onClick={prev} style={btn}>Prev</button>\r\n        <button onClick={next} style={btn}>Next</button>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nconst btn: React.CSSProperties = {\r\n  padding: \"10px 14px\",\r\n  borderRadius: 8,\r\n  border: \"1px solid #e5e7eb\",\r\n  background: \"#fafafa\",\r\n  cursor: \"pointer\",\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}}]
}